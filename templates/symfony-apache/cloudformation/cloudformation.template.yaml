AWSTemplateFormatVersion: "2010-09-09"
Description: "This file describes the infrastructure for a Symfony Website"
Resources:

  #
  # ECS
  #
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Join
        - ''
        - - !Ref DomainWithDashesParameter
          - '-cluster-'
          - !Ref EnvironmentNameParameter

  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Join
        - ''
        - - !Ref DomainWithDashesParameter
          - '-service'
      LoadBalancers:
        -   ContainerPort: '80'
            ContainerName: !Ref DomainWithDashesParameter
            TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref PublicSecurityGroup
      DesiredCount: '1'
      LaunchType: FARGATE
    DependsOn:
      - LoadBalancer
      - HttpsListenerRule

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - ''
        - - '/ecs/docker-logs/'
          - !Ref DomainWithDashesParameter
          - '-'
          - !Ref EnvironmentNameParameter

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        -   LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join
                  - ''
                  - - '/ecs/docker-logs/'
                    - !Ref DomainWithDashesParameter
                    - '-'
                    - !Ref EnvironmentNameParameter
                awslogs-region: !Ref 'AWS::Region'
                awslogs-stream-prefix: ecs
            PortMappings:
              -   HostPort: 80
                  Protocol: tcp
                  ContainerPort: 80
            Environment:
              -   Name: APP_ENV
                  Value: !If [IsProduction, 'prod', 'dev']
              -   Name: APP_DEBUG
                  Value: !If [IsProduction, 0, 1]
            Cpu: 0
            Image: !Ref TaskDefinitionImageParameter
            Essential: true
            Name: !Ref DomainWithDashesParameter
      ExecutionRoleArn: !Join
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - ':role/'
          - 'ECSMicroserviceRole'
      TaskRoleArn: !Join
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - ':role/'
          - 'ECSMicroserviceRole'
      Cpu: !Ref TaskCpuParameter
      Memory: !Ref TaskMemoryParameter
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  #
  # LOAD BALANCING
  #
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref PublicSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Scheme: internet-facing
      Type: application
      Name: !Join
        - ''
        - - 'lb-'
          - !Ref UniqueShortEnvKeynameParameter
          - '-'
          - !Ref EnvironmentNameParameter

  HttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArnParameter
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Protocol: HTTPS
      Port: '443'
      LoadBalancerArn: !Ref LoadBalancer
    DependsOn:
      - LoadBalancer

  RedirectToHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Host: '#{host}'
            Query: '#{query}'
            Path: '/#{path}'
            Port: '443'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Ref Route53DNSRecordNameParameter

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref VPC
      Port: '80'
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 45
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 4
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Name: !Join
        - ''
        - - 'tg-'
          - !Ref UniqueShortEnvKeynameParameter
          - '-'
          - !Ref EnvironmentNameParameter

  #
  # CACHE
  #
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          Fn::If:
            - IsProduction
            - - !Ref Route53DNSRecordNameParameter
              - !Join
                - ''
                - - 'www.'
                  - !Ref Route53DNSRecordNameParameter
            - - !Ref Route53DNSRecordNameParameter

        DefaultCacheBehavior:
          AllowedMethods: ["GET", "HEAD", "OPTIONS", "PUT", "POST", "PATCH", "DELETE"]
          Compress: true
          ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Host
          TargetOriginId: "LoadBalancer"
          ViewerProtocolPolicy: "redirect-to-https"

        Enabled: true
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
            DomainName: !GetAtt LoadBalancer.DNSName
            Id: "LoadBalancer"
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArnParameter
          SslSupportMethod: sni-only
    DependsOn:
      - Service


  #
  # ROUTING
  #
  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Ref Route53DNSRecordNameParameter
      Type: A
      HostedZoneId: !Ref Route53HostedZoneId
    DependsOn:
      - CloudFrontDistribution

  #
  # NETWORKING
  #
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  PublicSubnetInternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - VPCGatewayAttachment

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: The public security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -   IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
        -   IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
        -   IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        -   IpProtocol: '-1'
            FromPort: '-1'
            ToPort: '-1'
            CidrIp: 0.0.0.0/0

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - 'a'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - 'b'

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

Parameters:
  CertificateArnParameter:
    Type: String
  DomainWithDashesParameter:
    Type: String
  EnvironmentNameParameter:
    Type: String
  Route53DNSRecordNameParameter:
    Type: String
  Route53HostedZoneId:
    Type: String
  S3DeploymentKeyParameter:
    Type: String
  UniqueShortEnvKeynameParameter:
    Type: String

  ContentfulMainEnvironmentIdParameter:
    Type: String
  ContentfulPreviewEnvironmentIdParameter:
    Type: String

  TaskDefinitionImageParameter:
    Type: String
  TaskCpuParameter:
    Type: String
    Default: '256'
  TaskMemoryParameter:
    Type: String
    Default: '512'

Conditions:
  IsProduction: !Equals [!Ref EnvironmentNameParameter, prod]

